https://github.com/WingsRZyd/2_semester_homeworks/tree/main/ConfrontationOfRaces
Рецензия: Гагин Артур рецензирует Андреева Романа (блок 1, задача 1). 
-Readme.md: Файл должен содержать описание решаемой задачи, а также, желательно, правила написанной игры.
-Необходим executable файл.
-Start.cs and Battle.cs: отсутствие импорта пространства имен System. Обратите внимание: в дальнейшем рецензия в этих файлах делается с прибавлением этой строчки, поэтому это может сказаться на комментариях в рецензии.
-Start.cs: 7: Публичные методы классов стоит называть с большой буквы.
-Start.cs: 9 - 23: Объявление переменных стоит выполнять с помощью неявного "типа" var (в дальнейшем: #0).
-Start.cs (не критично): В целом, выглядит слегка громоздко, но за счет того, что выделен отдельный класс с нужными методами под начало игры, на читаемости особо не сказывается.
-Battle.cs: 10, 75, 77, 94, 115, 143, 150, 162, 184: #0.
-Battle.cs: 14, 20, 79, 85, 145, 151: Переменные стоит обозначать с маленькой буквы.
-Battle.cs: 14, 20 (не очень критично): В идеале, выводить ошибку, если пользователь вводит числа, выходящие за пределы требуемых и/или строки, не являющиеся числами (в дальнейшем #1).
-Battle.cs: 16, 22, 26, 47, 81, 87, 112, 147, 153, 158, 180: Вместо вывода в консоль информации, обращаясь к каждому полю, можно было бы использовать метод PrintAboutCharacters(), предварительно сделав его абстрактным в базовом классе и затем использовав override.
-Battle.cs: 29, 50, 77, 94: #1.
-Battle.cs: В целом, читаемо, но можно было добавить в класс Character отдельное поле типа bool isAI, в зависимости от которого в методе класса битвы через if/else было бы реализовано получение ответа. Тогда не пришлось бы писать три различных метода, а лишь один, хоть и чуть больше (в сумме, кода было бы меньше).
-Battle.cs: (не критично): buttonPlayer1 и buttonPlayer2 могут быть обращены в одну переменную, что позволит совершенно незаметно поэкономить на памяти.
-Battle.cs: Проверка на то, кончилось ли у игрока хп, может быть помещена в метод CheckAndGetDamage().  
-Characters.cs (важно): Довольно большое внимание стоит обратить на модификаторы доступа. Некоторые поля можно сделать readonly, некоторые методы могут быть сделаны private (например, методу GetDamage() не имеет смысла быть public), некоторые конструкторы могут быть сделаны protected, etc.
-Characters.cs: 14: Code-Style: dodgeChance.
-Characters.cs: 44, 45: #0.
-Characters.cs: Неиспользуемый метод getHealth().
-Characters.cs: 96: Абстрактный класс Characters уже содержит поле Mana.
-Characters.cs: 104: Code-Style(!): Public методы стоит называть с большой буквы.
-Characters.cs: 396, 397: #0.
-Program.cs: 12: Объект, который не используется.
-Program.cs: 15: #1.

/////

-Возможно, стоило бы печатать что-то в консоль, после нанесения персонажем урона скиллом/обычной атакой, но это вовсе не критично (когда ходят боты, например, сложно понять, что именно они выбирают).
-Присутствует парочка грамматических ошибок, практически не бросающихся в глаза.