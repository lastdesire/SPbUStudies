https://github.com/Nikita-Zhilin/SPBU_Studies/tree/main/Programming_SecondTerm/TekkenCardGame
Рецензия: Гагин Артур рецензирует Жилина Никиту (блок 1, задача 1). 
-Readme.md: Файл должен содержать описание решаемой задачи, а также, желательно, правила написанной игры.
-Необходим executable файл.
-Отсутствует UML-диаграмма.
-Самое важное замечание, которое сразу бросается в глаза: все методы, классы, поля имеют модификатор доступа public. Некоторые поля можно сделать readonly, некоторые методы могут быть сделаны private, некоторые конструкторы могут быть сделаны protected, etc. При следующем апгрейде программы, в первую очередь, стоит исправлять именно это!
-Program.cs: 11: Объявление переменных стоит выполнять с помощью неявного "типа" var (в дальнейшем: #0).
-FighterSelection.cs: 9: Названия публичных методов стоит прописывать с большой буквы.
-FighterSelection.cs: 17: Правильное название метода: ClassFighterChoose().
-FighterSelection.cs: 23, 25, 29, 31, 35, 37, 39, 49, 51, 55, 57, 61, 63, 65: Квалификатор является избыточным. Правильно: "printHeavyFightersDescription();" и "return ChooseHeavyFighters(fighter);"
-FighterSelection.cs: 24: #0.
-FighterSelection.cs: 24, 30, 36: В идеале, выводить ошибку, если пользователь вводит числа, выходящие за пределы требуемых и/или строки, не являющиеся числами (в дальнейшем #1).
-FighterSelection.cs: 42: Правильное название метода: ClassFighterChooseAI().
-FighterSelection.cs: 44, 50: #0.
-FighterSelection.cs: 69, 83, 97: Названия публичных методов стоит прописывать с большой буквы.
-FighterSelection.cs: 69, 83, 97: Названия публичных методов стоит прописывать с большой буквы.
-FighterSelection.cs: (не критично): В целом, выглядит немного громоздко, но за счет того, что выделен отдельный класс с нужными методами под начало игры, на читаемости особо не сказывается.
-Программа написана так, что под бота и под игрока пишутся разные методы. Более резонно было бы добавить отдельное поле в класс Characters (который, к слову, правильнее было бы назвать "Character") типа bool isAI в зависимости от которого в методах через if/else были бы реализованы разные пути. Тогда, например, не пришлось бы писать три различных метода игры, а лишь один, хоть и чуть больше (в сумме, кода было бы явно меньше).
-FighterSelection.cs: 111, 130, 149: Аргумент метода стоило бы назвать хоть чуть-чуть более информативно.
-Game.cs: 9, 12, 19, 31: #0.
-Game.cs: 14, 21: Название переменной должно быть с маленькой буквы.
-Game.cs: 25: За счет проверки внутри цикла все работает правильно, но корректно было бы написать while ((Player1.health > 0) || (Player2.health > 0)).	
-Game.cs: 27: Вместо такого громоздкого вывода в консоль стоило бы сделать метод PrintInfoAboutCharacter() у класса Characters, который в данной строчке будет вызываться.
-В зависимости от типа персонажа вызываются разные методы нанесения урона. Это плохо. Стоило бы прописать один метод, который будет реализован по разному для каждого типа (например, getBlockedDamage и getDamage).
-Аналогично с методом uniqueAbility(). В идеале он не должен быть доступен тем, у кого нет этой самой уникальной "абилки".
-Также getAttackBoost().
-Вместо того, чтобы прописывать в цикле ход первого, а потом второго игрока, лучше всего создать метод, который просто будет выполнять ход, а в цикле прогонять этот метод по очереди. Выглядит очень громоздко, желание читать код дальше пропадает.
-Присутствуют логические ошибки, рекомендуется переписать код в соответствии с рекомендацией выше, обратив на логическую идею хода особое внимание. Например: Game.cs: 126: Предположим, что первый игрок действительно типа HeavyFighters, а второй игрок типа MartialArts. Тогда, получается, что первый игрок нанесет урон не один раз.
-Также идеально было бы соблюдать хотя бы какой-то баланс, хоть в задаче этого и не требуется. Тяжелые бойцы, используя способность, просто тратят ход, обретая себя на получение урона, хоть и на меньший, чем обычно. Например, можно было бы увеличивать им атаку навсегда.
-Парочка грамматических ошибок. Game.cs: 187: Правильно будет написать "выберите".